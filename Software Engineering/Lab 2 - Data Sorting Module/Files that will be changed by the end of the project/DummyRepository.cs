using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lab2___Data_Sorting_Module
{
    public class Repository<T> where T : IComparable<T>
    {
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //true -> The array/list contains only Value Types or strings and such need no lambda function for the sort
        //false -> the array/list contains FacebookAccount types that can be sorted based on multiple fields (username, email, etc.)
        bool isValueType;
        private List<T> repositoryList;
        private T[] repositoryArray;
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public Repository(List<T> list)
        {
            this.repositoryList = list;
            //Check if the list is one holding ValueTypes or strings Or if it is holding FacebookAccount object types
            isValueType = (repositoryList.GetType() == typeof(string) || repositoryList.GetType().IsValueType);
            this.repositoryArray = null;
        }
        public Repository(T[] array)
        {
            this.repositoryArray = array;
            //Check if the array is one holding ValueTypes or strings Or if it is holding FacebookAccount object types
            isValueType = (repositoryArray.GetType() == typeof(string) || repositoryArray.GetType().IsValueType);
            this.repositoryList = null;
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public bool IsValueType
        {
            get { return isValueType; }
            set { isValueType = value; }
        }

        public List<T> RepositoryList
        {
            get { return repositoryList; }
            set { repositoryList = value; }
        }

        public T[] RepositoryArray
        {
            get { return repositoryArray; }
            set { repositoryArray = value; }
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }
}

